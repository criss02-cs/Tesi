@page "/"
@using Task = System.Threading.Tasks.Task
@using System.Collections.ObjectModel
@inject SolverService SolverService
@inject ConfigService ConfigService
@inject SfDialogService DialogService


<!-- Gantt chart -->
<div class="gantt">
    <div class="container my-3 mt-0 mx-0">
        <div class="row">
            <div class="col-6 col-md-2">Tempo per l'esecuzione:</div>
            <div class="col-6 col-md-1">@_result?.ElapsedMilliseconds ms</div>
            <div class="col-6 col-md-3">Tempo minimo per il completamento:</div>
            <!-- Aggiungo + 1 ai giorni così conto anche il giorno corrente, altrimenti mi farebbe solo la differenza-->
            <div class="col-6 col-md-2">@CompletionDays giorni</div>
            <div class="col-6 col-md-2">Stato soluzione:</div>
            <div class="col-6 col-md-2">@_result?.Status</div>
        </div>
    </div>
    <SfGantt DataSource="@TaskCollection" IncludeWeekend="true" EnablePredecessorValidation="false"
             Height="100%" Width="100%" AllowUnscheduledTasks="true" TValue="GanttData"
             ProjectStartDate="@_projectStartDate" ProjectEndDate="@_projectEndDate"
             GridLines="Syncfusion.Blazor.Gantt.GridLine.Both">
        <GanttColumns>
            <GanttColumn Field="Name" HeaderText="Name" TextAlign="TextAlign.Center"></GanttColumn>
            <GanttColumn Field="StartDate" HeaderText="Start Date" TextAlign="TextAlign.Center">
            </GanttColumn>
        </GanttColumns>
        <GanttTaskFields Id="Id" Name="Name" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress"
                         ParentID="ParentId"
                         Dependency="Predecessor" />
        <GanttTimelineSettings TimelineViewMode="TimelineViewMode.Day">
            <GanttTopTierSettings Unit="TimelineViewMode.Month">
                <FormatterTemplate>
                    @{
                        if (context.Tier == "top")
                        {
                            @context.Date.ToString("Y").ToTitleCase()
                        }
                    }
                </FormatterTemplate>
            </GanttTopTierSettings>
            <GanttBottomTierSettings Unit="TimelineViewMode.Day">
                <FormatterTemplate>
                    @{
                        if (context.Tier == "bottom")
                        {
                            @context.Date.Day
                        }
                    }
                </FormatterTemplate>
            </GanttBottomTierSettings>
        </GanttTimelineSettings>
        <GanttSplitterSettings Position="30%"></GanttSplitterSettings>
    </SfGantt>
</div>

<!-- Form data -->
<div class="container my-3">
    <div class="row my-2">
        <div class="col-6 col-md-9">
            <span style="font-weight: bold; font-size: 20px">Carica dati</span>
        </div>
        <div class="col-6 col-md-3">
            <SfComboBox TValue="string" TItem="SelectItem<string>" Placeholder="Seleziona un solver" DataSource="@_solvers" @bind-Value="_solver">
                <ComboBoxFieldSettings Text="Label" Value="Value"></ComboBoxFieldSettings>
                <ComboBoxEvents TValue="string" TItem="SelectItem<string>" OnValueSelect="@OnSolverSelected"></ComboBoxEvents>
            </SfComboBox>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-12 col-md-9">
            <SfAccordion>
                <AccordionItems>
                    @foreach (var job in _jobs)
                    {
                        <AccordionItem Header="@job.Name">
                            <ContentTemplate>
                                <div class="container">
                                    <div class="row row-cols-1 row-cols-md-4">
                                        @foreach (var task in job.Tasks)
                                        {
                                            <div class="col">
                                                <SfCard>
                                                    <CardHeader Title="@task.Name" />
                                                    <CardContent>
                                                        <div class="container px-0">
                                                            <div class="row">
                                                                <div class="col">
                                                                    <SfComboBox TValue="int" TItem="Machine" Placeholder="Seleziona una macchine" DataSource="@_machines" @bind-Value="task.Machine">
                                                                        <ComboBoxFieldSettings Text="Description" Value="Id"></ComboBoxFieldSettings>
                                                                        @* <ComboBoxEvents TValue="string" TItem="SelectItem<string>" OnValueSelect="@OnSolverSelected"></ComboBoxEvents> *@
                                                                        <ComboBoxTemplates TItem="Machine">
                                                                            <NoRecordsTemplate>
                                                                                <span class="norecord">Nessuna macchina presente.</span>
                                                                            </NoRecordsTemplate>
                                                                        </ComboBoxTemplates>
                                                                    </SfComboBox>
                                                                </div>
                                                            </div>
                                                            <div class="row">
                                                                <div class="col">
                                                                    <SfNumericTextBox TValue="int" Value="@task.Duration" Min="1"></SfNumericTextBox>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </CardContent>
                                                </SfCard>
                                            </div>
                                        }
                                    </div>
                                </div>
                                <button @onclick="() => AddNewTask(job)" type="button" class="btn btn-success mt-2">Aggiungi un nuovo task</button>
                            </ContentTemplate>
                        </AccordionItem>
                    }
                </AccordionItems>
            </SfAccordion>
            <button @onclick="AddNewJob" type="button" class="btn btn-success mt-2">Aggiungi un nuovo job</button>
        </div>
        <div class="col-sm-12 col-md-3">
            <SfListView DataSource="_machines" ShowHeader="true" HeaderTitle="Macchine">
                <ListViewFieldSettings TValue="Machine" Id="Id" Text="Description"></ListViewFieldSettings>
                <ListViewTemplates TValue="Machine">
                    <Template>
                        <div class="container m-0 p-0">
                            <div class="row">
                                <div class="col-10">
                                    @context.Description
                                </div>
                                <div class="col-2" style="text-align: center">
                                    <SfTooltip Target="@MachineId(context.Id)" Content="Elimina la macchina">
                                        <span @onclick="() => _machines.Remove(context)" class="bi bi-x-lg" id="@MachineId(context.Id).Replace("#", "")"></span>
                                    </SfTooltip>
                                </div>
                            </div>
                        </div>
                    </Template>
                </ListViewTemplates>
            </SfListView>
            <button @onclick="AddNewMachine" type="button" class="btn btn-success mt-2">Aggiungi una nuova macchina</button>
        </div>
    </div>
</div>

<!-- Result table -->
<div class="container my-3 mx-0 mx-md-auto">
    @if (_result is not null)
    {
        @foreach (var res in _result.AssignedTasks)
        {
            <div class="row">
                <div class="col-12 col-md-2">
                    Machine @res.Key:
                </div>
                @foreach (var task in res.Value)
                {
                    <div class="col-4 col-md-2 gap-2">
                        <div class="container p-0">
                            <div class="row">
                                <div class="col">
                                    @($"job_{task.JobId}_task_{task.TaskId}")
                                </div>
                            </div>
                            <div class="row">
                                <div class="col">
                                    @($"[{task.Start}, {task.End}]")
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    }
</div>

@code {
    private List<GanttData> TaskCollection { get; set; } = [];
    private SolverResult? _result = new([], 0, "");
    private readonly DateTime _projectStartDate = DateTime.Now.Date;
    private DateTime _projectEndDate = DateTime.Now.Date.AddDays(20);
    private string _solver = "google";
    private readonly IEnumerable<SelectItem<string>> _solvers = Enum.GetNames<Solvers>().Select(x => new SelectItem<string>(x.ToLower(), x.ToTitleCase()));
    private readonly ObservableCollection<Machine> _machines = [];
    private readonly List<Job> _jobs = [];
    private int CompletionDays => (_projectEndDate - _projectStartDate).Days;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // mi carico dei dati fittizi, e lo faccio scegliere se farlo oppure
            var isConfirm = await DialogService.ConfirmAsync("Vuoi caricare dei dati iniziali?", "Carica dati iniziali", new DialogOptions
            {
                PrimaryButtonOptions = new DialogButtonOptions { Content = "Sì" },
                CancelButtonOptions = new DialogButtonOptions { Content = "No" }
            });
            Console.WriteLine(isConfirm);
            if (isConfirm)
            {
                var data = await ConfigService.LoadSampleData();
                _machines.Clear();
                data.SelectMany(x => x.Tasks.Select(y => y.Machine)).Distinct().ToList().ForEach(x => _machines.Add(new Machine(x)));
                _jobs.Clear();
                _jobs.AddRange(data);
                _result = await SolverService.Solve(_solver, _jobs);
                if (_result is null) return;
                RenderTasks();
                StateHasChanged();
            }
        }
    }

    private void RenderTasks()
    {
        TaskCollection = [];
        if (_result is null) return;
        var converter = new GanttAdapter(_result.AssignedTasks);
        TaskCollection = converter.Convert();
        var max = _result.AssignedTasks
            .SelectMany(x => x.Value)
            .Max(x => x.End);
        _projectEndDate = _projectStartDate.AddDays(max);
    }

    private async Task OnSolverSelected(SelectEventArgs<SelectItem<string>> obj)
    {
        _solver = obj.ItemData.Value;
        _result = await SolverService.Solve(_solver, _jobs);
        if (_result is null) return;
        RenderTasks();
    }

    private static string MachineId(int id) => $"#Machine_{id}";

    private void AddNewMachine(MouseEventArgs e)
    {
        _machines.Add(new Machine(_machines.Count + 1));
        StateHasChanged();
    }

    private void AddNewJob(MouseEventArgs e)
    {
        _jobs.Add(new Job(_jobs.Count + 1, []));
        StateHasChanged();
    }

    private void AddNewTask(Job job)
    {
        job.AddTask(new Tesi.Solvers.Task(0, 0, job.Tasks.Count + 1));
        StateHasChanged();
    }

}