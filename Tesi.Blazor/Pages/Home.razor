@page "/"
@using Task = Tesi.Solvers.Task
@using System.Text.Json.Serialization
@using System.Text.Json
@using Syncfusion.Blazor.Grids
@using System.Drawing

<div class="gantt">
    <SfGantt DataSource="@TaskCollection" IncludeWeekend="true" EnablePredecessorValidation="false"
             Height="100%" Width="100%" AllowUnscheduledTasks="true" TValue="TaskData"
             ProjectStartDate="@_projectStartDate" ProjectEndDate="@_projectEndDate"
             GridLines="Syncfusion.Blazor.Gantt.GridLine.Both">
        <GanttColumns>
            <GanttColumn Field="TaskName" HeaderText="Name"></GanttColumn>
            <GanttColumn Field="StartDate" HeaderText="Start Date">
            </GanttColumn>
        </GanttColumns>
        <GanttTaskFields Id="TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress"
                         ParentID="ParentId"
                         Dependency="Predecessor"/>
        <GanttTimelineSettings TimelineViewMode="TimelineViewMode.Day">
            <GanttTopTierSettings Unit="TimelineViewMode.Month"></GanttTopTierSettings>
            <GanttBottomTierSettings Unit="TimelineViewMode.Day">
                <FormatterTemplate>
                    @{
                        if (context.Tier == "bottom")
                        {
                            @context.Date.Day
                        }
                    }
                </FormatterTemplate>
            </GanttBottomTierSettings>
        </GanttTimelineSettings>
    </SfGantt>
</div>

<div class="container">
    @if (_result is not null)
    {
        @foreach (var res in _result.AssignedTasks)
        {
            <div class="row">
                <div class="col-2">
                    Machine: @res.Key
                </div>
                @foreach (var task in res.Value)
                {
                    <div class="col-2">
                        <div class="container">
                            <div class="row">
                                @($"job_{task.JobId}_task_{task.TaskId}")
                            </div>
                            <div class="row">
                                @($"[{task.Start}, {task.End}]")
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    }
</div>

<style>
    .gantt {
        width: 80vw;
        border: 2px solid;
        padding: 20px;
        resize: both;
        overflow: auto;
    }
</style>

@code {
    private List<TaskData> TaskCollection { get; set; } = new();
    private SolverResult? _result = new([], 0, "");
    private readonly DateTime _projectStartDate = DateTime.Now.Date;
    private DateTime _projectEndDate = DateTime.Now.Date.AddDays(20);

    public class TaskData
    {
        public Guid TaskId { get; set; }
        public string TaskName { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime? EndDate { get; set; }
        public string Duration { get; set; }
        public int Progress { get; set; }
        public Guid? Predecessor { get; set; }
        public Guid? ParentId { get; set; }
    }

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        using var client = new HttpClient();
        _result = await client.GetFromJsonAsync<SolverResult>("http://localhost:5273/assignedTasks");
        if (_result is null) return;
        RenderTasks();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        RenderTasks();
        base.OnAfterRender(firstRender);
    }

    private bool _isBusy = false;
    private void RenderTasks()
    {
        if (_isBusy) return;
        _isBusy = true;
        TaskCollection = [];
        var maxDuration = 0;
        foreach (var machine in _result.AssignedTasks)
        {
            var duration = machine.Value.Sum(x => x.Duration);
            var taskData = new TaskData
            {
                TaskId = Guid.NewGuid(),
                TaskName = $"Machine {machine.Key}",
                StartDate = DateTime.Now.Date,
                Duration = $"{duration}days",
            };
            if (duration > maxDuration)
            {
                maxDuration = duration;
            }

            TaskCollection.Add(taskData);
            foreach (var task in machine.Value)
            {
                var t1 = new TaskData()
                {
                    TaskId = Guid.NewGuid(),
                    TaskName = $"Job {task.JobId} Task {task.TaskId}",
                    StartDate = taskData.StartDate.AddDays(task.Start),
                    Duration = $"{task.Duration}days",
                    ParentId = taskData.TaskId,
                };
                TaskCollection.Add(t1);
            }
        }

        foreach (var task in TaskCollection)
        {
            if (task.TaskName.Contains("Machine")) continue;
            var jobId = task.TaskName.Split(" ")[1];
            var taskId = task.TaskName.Split(" ")[3];
            var predecessor = GetPredecessor(int.Parse(jobId), int.Parse(taskId));
            if (predecessor != Guid.Empty)
                task.Predecessor = predecessor;
        }
        _projectEndDate = _projectStartDate.AddDays(maxDuration);
        _isBusy = false;
    }
    private Guid GetPredecessor(int jobId, int taskId)
    {
        if (taskId == 1) return Guid.Empty;
        var task = _result.AssignedTasks
            .SelectMany(x => x.Value)
            .FirstOrDefault(x => x.JobId == jobId && x.TaskId == taskId - 1);
        var taskData = TaskCollection
            .FirstOrDefault(x => x.TaskName == $"Job {jobId} Task {task.TaskId}");
        return taskData?.TaskId ?? Guid.Empty;
    }

}